// Generated by CoffeeScript 1.7.1
(function() {
  angular.module('BookStore').factory('Pagination', function() {
    var parseLink;
    parseLink = function(data, header, skip, limit) {
      var currentPage, from, limitVal, link, links, p, pages, paging, parts, regex, rel, skipVal, to, total, visiblePages, _i, _len, _ref, _ref1;
      if (skip == null) {
        skip = 'skip';
      }
      if (limit == null) {
        limit = 'limit';
      }
      links = header.split(', ');
      paging = {};
      for (_i = 0, _len = links.length; _i < _len; _i++) {
        link = links[_i];
        parts = link.split('; rel=');
        rel = parts[1].split('"')[1];
        regex = new RegExp("" + skip + "=(\\d+)");
        skipVal = Number((_ref = parts[0].match(regex)) != null ? _ref[1] : void 0);
        regex = new RegExp("" + limit + "=(\\d+)");
        limitVal = Number((_ref1 = parts[0].match(regex)) != null ? _ref1[1] : void 0);
        paging[rel] = {
          skip: skipVal,
          limit: limitVal
        };
      }
      total = paging.last.skip + limitVal;
      pages = Math.ceil(total / limitVal);
      if (pages === 1) {
        total = data.length;
      }
      currentPage = 1 + Math.ceil(paging.self.skip / limitVal);
      from = paging.self.skip + 1;
      to = Math.min(total, from + limitVal - 1);
      visiblePages = (function() {
        var _j, _results;
        _results = [];
        for (p = _j = 1; 1 <= pages ? _j <= pages : _j >= pages; p = 1 <= pages ? ++_j : --_j) {
          _results.push({
            page: p,
            skip: limitVal * (p - 1),
            limit: limitVal,
            current: p === currentPage
          });
        }
        return _results;
      })();
      return angular.extend(paging, {
        total: total,
        pages: pages,
        currentPage: currentPage,
        from: from,
        to: to,
        visiblePages: visiblePages
      });
    };
    return function(data, headerGetter) {
      var linkHeader;
      linkHeader = headerGetter('link');
      if (!(linkHeader != null ? linkHeader.length : void 0)) {
        return {};
      }
      return parseLink(data, linkHeader);
    };
  });

}).call(this);
